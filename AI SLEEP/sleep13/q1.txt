import math

def evaluate(board):
    
    if "X" in board and "O" in board:
        return 0
    elif "X" in board:
        return 1
    elif "O" in board:
        return -1
    else:
        return 0

def is_moves_left(board):
    return " " in board

def mini_max(board, depth, is_maximizing):
    score = evaluate(board)

    if score == 1 or score == -1:
        return score

    if not is_moves_left(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(len(board)):
            if board[i] == " ":
                board[i] = "X"
                score = mini_max(board, depth + 1, False)
                board[i] = " "
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(len(board)):
            if board[i] == " ":
                board[i] = "O"
                score = mini_max(board, depth + 1, True)
                board[i] = " "
                best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_val = -math.inf
    best_move = -1

    for i in range(len(board)):
        if board[i] == " ":
            board[i] = "X"
            move_val = mini_max(board, 0, False)
            board[i] = " "
            if move_val > best_val:
                best_move = i
                best_val = move_val

    return best_move

def print_board(board):
    for i in range(0, len(board), 3):
        print(board[i], "|", board[i + 1], "|", board[i + 2])

if __name__ == "__main__":
    initial_board = [" ", " ", " ",
                     " ", " ", " ",
                     " ", " ", " "]

    print("Initial Board:")
    print_board(initial_board)

    while is_moves_left(initial_board):
        player_move = int(input("Enter your move (1-9): ")) - 1
        if initial_board[player_move] == " ":
            initial_board[player_move] = "O"
        else:
            print("Invalid move. Try again.")
            continue

        print("Updated Board:")
        print_board(initial_board)

        if not is_moves_left(initial_board):
            break

        print("Computer's move:")
        computer_move = find_best_move(initial_board)
        initial_board[computer_move] = "X"

        print_board(initial_board)

    print("Game Over.")
