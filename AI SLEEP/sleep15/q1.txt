def monkey_banana_problem(grid):
    rows = len(grid)
    cols = len(grid[0])

    max_bananas = [[0] * cols for _ in range(rows)]

    for i in range(rows - 1, -1, -1):
        max_bananas[i][cols - 1] = grid[i][cols - 1] + max_bananas[i + 1][cols - 1]

    for j in range(cols - 1, -1, -1):
        max_bananas[rows - 1][j] = grid[rows - 1][j] + max_bananas[rows - 1][j + 1]

    for i in range(rows - 2, -1, -1):
        for j in range(cols - 2, -1, -1):
            max_bananas[i][j] = grid[i][j] + max(max_bananas[i + 1][j], max_bananas[i][j + 1])

    i = j = 0
    path = [(i, j)]

    while i < rows - 1 or j < cols - 1:
        if i == rows - 1:
            j += 1
        elif j == cols - 1:
            i += 1
        else:
            if max_bananas[i + 1][j] > max_bananas[i][j + 1]:
                i += 1
            else:
                j += 1

        path.append((i, j))

    return max_bananas[0][0], path

if __name__ == "__main__":
    banana_grid = [
        [1, 2, 3, 4],
        [4, 3, 2, 1],
        [2, 1, 4, 3],
        [3, 4, 1, 2]
    ]

    max_bananas_collected, optimal_path = monkey_banana_problem(banana_grid)

    print("Maximum bananas collected:", max_bananas_collected)
    print("Optimal path:", optimal_path)
