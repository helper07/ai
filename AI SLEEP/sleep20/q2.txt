def evaluate(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(cell == 'X' for cell in row):
            return 1
        elif all(cell == 'O' for cell in row):
            return -1

    for col in range(3):
        if all(board[row][col] == 'X' for row in range(3)):
            return 1
        elif all(board[row][col] == 'O' for row in range(3)):
            return -1

    if all(board[i][i] == 'X' for i in range(3)) or all(board[i][2 - i] == 'X' for i in range(3)):
        return 1
    elif all(board[i][i] == 'O' for i in range(3)) or all(board[i][2 - i] == 'O' for i in range(3)):
        return -1

    # No winner, the game is a draw
    return 0

def is_terminal(board):
    return evaluate(board) != 0 or all(all(cell != ' ' for cell in row) for row in board)

def minimax(board, depth, maximizing_player):
    if is_terminal(board):
        return evaluate(board)

    if maximizing_player:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
        return min_eval

def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

if __name__ == "__main__":
    board = [[' ', ' ', ' '],
             [' ', ' ', ' '],
             [' ', ' ', ' ']]

    print("Initial Board:")
    print_board(board)

    while not is_terminal(board):
        player_row = int(input("Enter your move row (0, 1, or 2): "))
        player_col = int(input("Enter your move column (0, 1, or 2): "))

        if board[player_row][player_col] == ' ':
            board[player_row][player_col] = 'O'
            print("Player's Move:")
            print_board(board)
        else:
            print("Invalid move. Cell already occupied. Try again.")
            continue

        if is_terminal(board):
            break

        print("Computer's Move:")
        computer_row, computer_col = find_best_move(board)
        board[computer_row][computer_col] = 'X'
        print_board(board)

    result = evaluate(board)
    if result == 1:
        print("Player wins!")
    elif result == -1:
        print("Computer wins!")
    else:
        print("It's a draw!")
