from queue import PriorityQueue

class PuzzleNode:
    def __init__(self, state, parent=None, move=None, depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.heuristic = self.calculate_heuristic()

    def calculate_heuristic(self):
        # Example heuristic: Manhattan Distance
        total_distance = 0
        goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

        for i in range(3):
            for j in range(3):
                if self.state[i][j] != 0:
                    value = self.state[i][j]
                    goal_position = divmod(value - 1, 3)
                    total_distance += abs(i - goal_position[0]) + abs(j - goal_position[1])

        return total_distance + self.depth

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_neighbors(node):
    i, j = get_blank_position(node.state)
    neighbors = []

    for move in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
        ni, nj = i + move[0], j + move[1]

        if 0 <= ni < 3 and 0 <= nj < 3:
            new_state = [row[:] for row in node.state]
            new_state[i][j], new_state[ni][nj] = new_state[ni][nj], new_state[i][j]
            neighbors.append(PuzzleNode(new_state, node, move, node.depth + 1))

    return neighbors

def solve_8_puzzle(initial_state):
    initial_node = PuzzleNode(initial_state)
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    goal_node = PuzzleNode(goal_state)

    visited = set()
    priority_queue = PriorityQueue()
    priority_queue.put((initial_node.heuristic, initial_node))

    while not priority_queue.empty():
        _, current_node = priority_queue.get()

        if current_node.state == goal_node.state:
            return build_solution(current_node)

        if current_node.state not in visited:
            visited.add(current_node.state)

            for neighbor in get_neighbors(current_node):
                if neighbor.state not in visited:
                    priority_queue.put((neighbor.heuristic, neighbor))

    return None

def build_solution(node):
    solution = []
    while node.parent is not None:
        solution.insert(0, node.move)
        node = node.parent
    return solution

if __name__ == "__main__":
    # Example initial state
    initial_state = [[1, 2, 3], [4, 5, 6], [0, 7, 8]]

    solution = solve_8_puzzle(initial_state)

    if solution:
        print("Solution found:")
        for move in solution:
            print(move)
    else:
        print("No solution found.")
