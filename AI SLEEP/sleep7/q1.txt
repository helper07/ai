def evaluate(board):
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != 0:
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != 0:
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != 0:
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != 0:
        return board[0][2]

    return 0

def is_full(board):
    for row in board:
        for cell in row:
            if cell == 0:
                return False
    return True

def minimax(board, depth, alpha, beta, is_maximizing):
    score = evaluate(board)

    if score != 0:
        return score

    if is_full(board):
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 1
                    eval = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = 0
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = -1
                    eval = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = 0
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                board[i][j] = 1
                move_val = minimax(board, 0, float('-inf'), float('inf'), False)
                board[i][j] = 0

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))

def main():
    board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

    while not is_full(board):
        print_board(board)
        player_row = int(input("Enter row (0, 1, or 2): "))
        player_col = int(input("Enter column (0, 1, or 2): "))

        if board[player_row][player_col] == 0:
            board[player_row][player_col] = -1
        else:
            print("Cell already occupied. Try again.")
            continue

        if evaluate(board) == -1:
            print_board(board)
            print("You win!")
            break

        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        print("Computer's turn:")
        computer_row, computer_col = find_best_move(board)
        board[computer_row][computer_col] = 1

        if evaluate(board) == 1:
            print_board(board)
            print("Computer wins!")
            break

if __name__ == "__main__":
    main()
